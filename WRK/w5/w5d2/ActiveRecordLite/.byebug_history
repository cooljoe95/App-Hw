quit
source_options.model_class.parse_all(ar_of_columns)[1]
source_options.model_class.parse_all(ar_of_columns)
source_options.model_class.parse_all(address)
address = ar_of_columns[1]
source_options.model_class.parse_all(((ar_of_columns)[1]))
source_options.model_class.parse_all((ar_of_columns)[1])
ar_of_columns[1]
ar_of_columns
source_options.model_class.parse_all(ar_of_columns[1])
source_options.model_class.parse_all(ar_of_columns)
source_options.model_class.parse_all
source_options.model_class
source_options
through_options
source_class
self.class.parse_all(ar_of_columns)
self.class.parse_all
ar_of_columns
self.class
self
c
quit
through_options.foreign_key
from_name
c
quit
through_options
source_options
query
c
quit
select_name
from_name
select_name
c
quit
      query = self.send(through_options.foreign_key)
self
through_options
source_options
quit
      SQL
          ?.? = ?;
        WHERE
          ? ON ?.? = ?.?
        JOIN
          ?
        FROM
          ?
        SELECT
 DBConnection.execute2(<<-SQL, select_name)
      from_name = source_class.table_name
select_name = source_options.model_class.table_name
source_options.model_class
source_options.constantize.table_name
through_options
source_class.table_name
through_options.class_name.constantize.table_name
through_options
source_class
source_options
through_options
through_name
source_class.table_name
through_options.class_name.constantize.table_name
through_options.class_name.constantize
.constantize
through_options.class_name
through_options
through_options.constantize.table_name
source_name
through_name
through
name
naem
through_options
source_options
"Cat".constantize
"cat".constantize
"Object".constantize
"Objects".constantize
"Object".constantize
"object".constantize
"objects".constantize
through_options.class_name.constantize
"Human".to_class
through_options.class_name
through_name
through_options
source_class.table_name
source_class
source_options
quit
source_name.methods
source_name
self
source_options
through_options
source_name
through_name
name
quit
through_options.model_class
self
quit
through_options
quit
self.class
source_name
through_name
name
self
quit
self.class
self
c
self
self.
quit
self
quit
model_class.where(hash)
hash = { options.foreign_key => id_to_match }
id_to_match
options.primary_key
primary_key
options.foreign_key
quit
options.model_class
options
quit
options
self
quit
HasManyOptions.new('cats', 'Human').class_name
HasManyOptions.new('cats', 'Human').primary_key
HasManyOptions.new('cats', 'Human').foreign_key
HasManyOptions.new('cats', 'Human')
self.all
self.first
self
Human.foreign_key
name.to_s.classify
Human.all
Human.methods
Human.methods\
Human
Human.foreign_id
Human.foreign_key
Human.foreign_ke
self
c
n
quit
options.primary_key
self.send(foreign_key)
self
foreign_key.to_s
foreign_key.to_x
Human.where(id: foreign_key.to_s)
Human.where(id: foreign_key.to_i)
foreign_key
Human.where(id: foreign_key)
Human.where(id: 1)
options.model_class
options.foreign_key
hash
hah
"#{name}".to_sym
"#{name}"
name
foreign_key
n
name
self
quit
n
options
